app: binance-leaderboard-bot
service: binance-leaderboard-bot

frameworkVersion: "2 || 3"

plugins:
  - "serverless-python-requirements"

# layers:
#   pybinance:
#     path: layers/pybinance
#     description: |
#       Lambda layer contains helper functions for aws services 
#       and other common functions to avoid repeating the code.
#     compatibleRuntimes:
#       - python3.9

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.9
  architecture: arm64
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 900 # 15 * 60
  versionFunctions: false

# TO SETUP TELEGRAM BOT: 
# 1. Create a new chat group.
# 2. Add the following bots to the chat.
#   - TELEGRAM_BOT_API_KEY: Message (@BotFather). Create your Bot, 
#       and get your Bot API key by creating a bot on Telegram .
#   - CHAT_ID: Add (@RawDataBot) to your group and type: "/start" to get the chat id. 
#       REF: https://www.alphr.com/find-chat-id-telegram/
#   OR
#   - CHAT_ID: Send a message to @username_to_id_bot with invitation link.
  environment:
    SERVICE_NAME: ${self:service}
    TELEGRAM_BOT_API_KEY: 5280766845:AAFXfHgOeuTUbXlDOF_bcsKIs8H_jWQ1O-Q
    TELEGRAM_CHAT_ID: -666728785

  # iam:
  #   role:
  #     statements:
  #       - Effect: "Allow"
  #         Action:
  #           - "s3:PutObject"
  #           - "s3:GetObject"
  #           - "s3:DeleteObject"
  #         Resource:
  #           Fn::Join:
  #             - ""
  #             - - "arn:aws:s3:::"
  #               - "Ref": "MainBucket"
  #               - "/*"
  #       - Effect: "Allow"
  #         Action:
  #           - "dynamodb:GetItem"
  #           - "dynamodb:PutItem"
  #           - "dynamodb:UpdateItem"
  #           - "dynamodb:DeleteItem"
  #           - "dynamodb:Query"
  #           - "dynamodb:Scan"
  #         Resource:
  #           - Fn::GetAtt:
  #               - MainTable
  #               - Arn
  #           - Fn::GetAtt:
  #               - MainTable
  #               - StreamArn
  #       - Effect: "Allow"
  #         Action:
  #           - "rekognition:DetectLabels"
  #         Resource: "*"

  stackTags:
    "name": ${self:service}

package:
  excludeDevDependencies: true
  patterns:
    - "!node_modules/**"
    - "!requirements.txt"
    - "!README.md"
    - "!.gitignore"

functions:
  binanceBot:
    handler: src.handlers.bot.index.handler
    description: Main bot handler.
    # layers:
    #   - Ref: PybinanceLambdaLayer
    events:
      - schedule: rate(5 minutes)


